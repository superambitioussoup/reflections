What happens when you initialize a repository? Why do you need to do it?
Initialize - simply creates a hidden directory .git
Needed? - To named the given directory a repository (for future additions?)


How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area serves as an intermediary stage towards creating a git repository from files from a working directory.

This gives finer control over what you want in a the repository.

How can you use the staging area to make sure you have one commit per logical
change?
You can use the staging area to start adding files that you know you have made a logical change to. Now, you have a point of comparison using git diff and git diff —staged to compare to working directory and to repository. (Pretty awesome!!!) If you notice changes, then you can reconsider what is a logical change or commit what you have in staging area first before adding more to the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
When you want to add a new (untested feature) and want to keep the main one clean…really when you just want to try anything new and wish to create a different version (want to test it first) and how a clean version ready for deploy if necessary. All these are helped by branched by allowed you to keep the main branch clean while still allowed you to “Branch off” into your new endeavors to try something out without the concern of killing off some good piece of working code (i.e. the Master)

How do the diagrams help you visualize the branch structure?
The diagrams show the various branches and their branches (how one commits links back to previous branches) and really drives home the idea that some nodes can get lost (if they don’t have a branch name).

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Merged branches result in a new tip that can reach all of the previous commits in either of the branch and thus can be represented in the diagram as a single point with arrows that point back down both branches. 

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
Automatic merging saves us a lot of time compared to manual merges and clearly points out possible conflicts.

Of course you lose a bit of control over your merges (automatic simply does a compare of what you are merging and assumes if nothing has changed in a general area then it should be kept but if something has then it needs to bring it up to the user). A bit of dumb but for small incremental changes, should be easy?
